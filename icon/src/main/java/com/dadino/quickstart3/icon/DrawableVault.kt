package com.dadino.quickstart3.icon

import android.content.Context
import android.graphics.drawable.Drawable

/**
 * [DrawableVault] is a singleton object that caches [Drawable] instances to improve performance by avoiding redundant creation of drawables.
 * It utilizes a [HashMap] to store drawables, keyed by a unique identifier generated by a [ContextDrawable].
 */
object DrawableVault {
  private val iconMap: HashMap<String, Drawable> = hashMapOf()

  /**
   * Retrieves a [Drawable] from a cache or creates a new one if not found.
   *
   * This function uses a [ContextDrawable] to obtain a unique identifier (`VaultId`) and attempts to retrieve a cached
   * drawable using this ID. If a drawable is found in the cache, it is returned directly. Otherwise, a new drawable is
   * created using the [ContextDrawable]'s `createDrawable` method.  The newly created drawable is then added to the cache
   * and returned.  If `createDrawable` returns `null`, then `null` is also returned, and nothing is added to the cache.
   *
   * @param context The Android [Context] used for accessing resources and creating drawables.
   * @param contextDrawable The [ContextDrawable] that encapsulates the logic for creating and identifying the drawable.
   * @return The cached [Drawable] if found, a newly created [Drawable] if not found in the cache, or `null` if the
   *         [ContextDrawable] failed to create a drawable.
   */
  fun getDrawable(
	context: Context,
	contextDrawable: ContextDrawable
  ): Drawable? {
	val id = contextDrawable.getVaultId(context)
	val oldIcon = iconMap[id]
	return if (oldIcon != null) oldIcon
	else {
	  val newDrawable = contextDrawable.createDrawable(context)
	  if (newDrawable != null) iconMap[id] = newDrawable
	  newDrawable
	}
  }

  fun describeContent(): String {
	return "DrawableVault contains:\n${iconMap.entries.sortedBy { it.key }.joinToString("\n") { it.key }}"
  }
}